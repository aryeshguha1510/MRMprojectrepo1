{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7498206,"sourceType":"datasetVersion","datasetId":4366175}],"dockerImageVersionId":30635,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.352488Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.353218Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.364761Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.353188Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.363780Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code]\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.366183Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.366801Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.375317Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.366776Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.374483Z\"}}\nimport torch\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\ndevice\n\nfrom torch.utils.data import SubsetRandomSampler\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.376614Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.376891Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.387865Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.376868Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.386978Z\"}}\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.389257Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.389535Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.465813Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.389512Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.465015Z\"}}\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\ntrain_data = datasets.MNIST(\n    root = 'data',\n    train = True,                         \n    transform = ToTensor(), \n    download = True,            \n)\ntest_data = datasets.MNIST(\n    root = 'data', \n    train = False, \n    transform = ToTensor()\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.467765Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.468240Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.473585Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.468206Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.472743Z\"}}\nprint(train_data)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.474660Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.474949Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.484326Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.474925Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.483418Z\"}}\nprint(test_data)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.486484Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.487114Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.494987Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.487081Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.494015Z\"}}\nprint(train_data.data.size())\n\n  \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.496145Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.496475Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.754801Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.496449Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.753858Z\"}}\nimport matplotlib.pyplot as plt\nplt.imshow(train_data.data[50], cmap='gray')\nplt.title('%i' % train_data.targets[0])\nplt.show()\n\n\ntrain_size=int(0.8 * len(train_data))\nval_size = len(train_data) - train_size\n\ntrain_sampler = SubsetRandomSampler(range(train_size))\nval_sampler = SubsetRandomSampler(range(train_size, len(train_data)))\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.756160Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.756606Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.764642Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.756572Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.763785Z\"}}\nfrom torch.utils.data import DataLoader\nloaders = {\n    'train' : torch.utils.data.DataLoader(train_data, \n                                          batch_size=100,\n                                          sampler=train_sampler,\n                                          #shuffle=True, \n                                          num_workers=1),\n    'val' : torch.utils.data.DataLoader(train_data, \n                                          batch_size=100,\n                                          sampler=val_sampler,\n                                          #shuffle=True, \n                                          num_workers=1),\n    \n    'test'  : torch.utils.data.DataLoader(test_data, \n                                          batch_size=100, \n                                          shuffle=True, \n                                          num_workers=1),\n}\nloaders\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.767003Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.767362Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.778140Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.767326Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.777298Z\"}}\nimport torch.nn as nn\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Sequential(         \n            nn.Conv2d(\n                in_channels=1,              \n                out_channels=16,            \n                kernel_size=5,              \n                stride=1,                   \n                padding=2,                  \n            ),                              \n            nn.ReLU(),                      \n            nn.MaxPool2d(kernel_size=2),    \n        )\n        self.conv2 = nn.Sequential(         \n            nn.Conv2d(16, 32, 5, 1, 2),     \n            nn.ReLU(),                      \n            nn.MaxPool2d(2),                \n        )\n        # fully connected layer, output 10 classes\n        self.out = nn.Linear(32 * 7 * 7, 10)\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        # flatten the output of conv2 to (batch_size, 32 * 7 * 7)\n        x = x.view(x.size(0), -1)       \n        output = self.out(x)\n        return output, x    # return x for visualization\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.779184Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.779497Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.790462Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.779473Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.789631Z\"}}\ncnn = CNN()\nprint(cnn)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.791576Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.791841Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.801080Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.791817Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.800214Z\"}}\nloss = nn.CrossEntropyLoss()   \nloss\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T14:20:32.802175Z\",\"iopub.execute_input\":\"2024-01-28T14:20:32.802450Z\",\"iopub.status.idle\":\"2024-01-28T14:20:32.814968Z\",\"shell.execute_reply.started\":\"2024-01-28T14:20:32.802427Z\",\"shell.execute_reply\":\"2024-01-28T14:20:32.814081Z\"}}\nfrom torch import optim\noptimizer = optim.Adam(cnn.parameters(), lr = 0.01)   \noptimizer\n\n\n\n\n#cnn = CNN().to(device)\n# %% [code]\n","metadata":{"_uuid":"63c05b0b-5210-4594-96e6-3f1a171e42be","_cell_guid":"b9ee0c28-087a-45f8-a52f-aede15d2a89d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-01-28T17:05:59.774038Z","iopub.execute_input":"2024-01-28T17:05:59.774931Z","iopub.status.idle":"2024-01-28T17:06:00.170463Z","shell.execute_reply.started":"2024-01-28T17:05:59.774863Z","shell.execute_reply":"2024-01-28T17:06:00.168872Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/mnistdigits/mnist_test.csv\n/kaggle/input/mnistdigits/mnist_train.csv\nDataset MNIST\n    Number of datapoints: 60000\n    Root location: data\n    Split: Train\n    StandardTransform\nTransform: ToTensor()\nDataset MNIST\n    Number of datapoints: 10000\n    Root location: data\n    Split: Test\n    StandardTransform\nTransform: ToTensor()\ntorch.Size([60000, 28, 28])\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"CNN(\n  (conv1): Sequential(\n    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (conv2): Sequential(\n    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (1): ReLU()\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (out): Linear(in_features=1568, out_features=10, bias=True)\n)\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.01\n    maximize: False\n    weight_decay: 0\n)"},"metadata":{}}]}]}