{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":160765215,"sourceType":"kernelVersion"},{"sourceId":160768094,"sourceType":"kernelVersion"}],"dockerImageVersionId":30635,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-28T17:44:19.726281Z\",\"iopub.execute_input\":\"2024-01-28T17:44:19.726919Z\",\"iopub.status.idle\":\"2024-01-28T17:44:19.736443Z\",\"shell.execute_reply.started\":\"2024-01-28T17:44:19.726861Z\",\"shell.execute_reply\":\"2024-01-28T17:44:19.735082Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\nimport model\nimport training\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-01-28T17:46:19.217731Z\",\"iopub.execute_input\":\"2024-01-28T17:46:19.218218Z\",\"iopub.status.idle\":\"2024-01-28T17:46:22.127734Z\",\"shell.execute_reply.started\":\"2024-01-28T17:46:19.218173Z\",\"shell.execute_reply\":\"2024-01-28T17:46:22.125781Z\"}}\ndef val():\n    # Test the model\n    model.cnn.eval()\n    with torch.no_grad():\n        correct = 0\n        total = 0\n        for training.images, training.labels in model.loaders['val']:\n            test_output, last_layer = model.cnn(training.images)\n            pred_y = torch.max(test_output, 1)[1].data.squeeze()\n            accuracy = (pred_y == training.labels).sum().item() / float(training.labels.size(0))\n           # pass\n    print('Test Accuracy of the model on val set : %.2f' % accuracy)\n    \n    #pass\nval()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2024-01-28T17:44:44.785980Z\",\"iopub.execute_input\":\"2024-01-28T17:44:44.786510Z\",\"iopub.status.idle\":\"2024-01-28T17:44:47.140445Z\",\"shell.execute_reply.started\":\"2024-01-28T17:44:44.786463Z\",\"shell.execute_reply\":\"2024-01-28T17:44:47.138077Z\"}}\nimport torch\ndef test():\n    # Test the model\n    model.cnn.eval()\n    with torch.no_grad():\n        correct = 0\n        total = 0\n        for training.images, training.labels in model.loaders['test']:\n            test_output, last_layer = model.cnn(training.images)\n            pred_y = torch.max(test_output, 1)[1].data.squeeze()\n            accuracy = (pred_y == training.labels).sum().item() / float(training.labels.size(0))\n           # pass\n    print('Test Accuracy of the model on the 10000 test images: %.2f' % accuracy)\n    \n    #pass\ntest()\n\n# %% [code]\n","metadata":{"_uuid":"44d67464-fe66-4f23-87d0-f976f9292b7b","_cell_guid":"70b97770-f000-40d7-80b2-6e0c522610f0","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}